# This taskbook is exactly indentical to the JSON version, but using YAML payload.
# The aci_rest module simply converts the YAML payload into JSON before sending to the APIC.

# Using YAML as input is convenient when managing the payload e.g. from git.

- name: Push aci_model

  # We prepare an aci_login anchor for convenience
  vars:
    aci_login: &aci_login
      hostname: '{{ apic_host }}'
      username: '{{ apic_username }}'
      password: '{{ apic_password }}'
      use_proxy: '{{ apic_use_proxy }}'
      validate_certs: '{{ apic_validate_certs }}'

  # We define the delegate_to at the block-level
  delegate_to: localhost

  block:
  # ***********TIER1 CONFIGURATIONS**************
  - name: Configure BGP ASN
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/mo/uni/fabric/bgpInstP-default/as.json
      method: post
      content:
        {
            "bgpAsP": {
                "attributes": {
                    "dn": "uni/fabric/bgpInstP-default/as",
                    "asn": "{{ item.system_settings_bgprr_asn }}",
                    "status": "{{ item.system_settings_bgprr_status | default() }}"
                },
                "children": []
            }
        }
    with_items: '{{ aci_model_data|aci_listify("system_settings","bgprr") }}'

  - name: Add BGP Route Reflector Nodes
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/mo/uni/fabric/bgpInstP-default/rr/node-{{ item.system_settings_bgprr_nodes_id }}.json
      method: post
      content:
        {
            "bgpRRNodePEp": {
                "attributes": {
                    "dn": "uni/fabric/bgpInstP-default/rr/node-{{ item.system_settings_bgprr_nodes_id }}",
                    "id": "{{ item.system_settings_bgprr_nodes_id }}",
                    "rn": "node-{{ item.system_settings_bgprr_nodes_id }}",
                    "status": "{{ item.system_settings_bgprr_nodes_status | default() }}"
                },
                "children": []
            }
        }
    with_items: '{{ aci_model_data|aci_listify("system_settings","bgprr","nodes") }}'

  - name: Add NTP Servers to Date and Time Pod Policy
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/fabric/time-{{ item.fabric_policy_pod_policy_datetime_name }}/ntpprov-{{ item.fabric_policy_pod_policy_datetime_servers_ipaddress }}.json
      method: post
      content:
        {
            "datetimeNtpProv": {
                "attributes": {
                    "dn": "uni/fabric/time-default/ntpprov-{{ item.fabric_policy_pod_policy_datetime_servers_ipaddress }}",
                    "name": "{{ item.fabric_policy_pod_policy_datetime_servers_ipaddress }}",
                    "preferred": "{{ item.fabric_policy_pod_policy_datetime_servers_preferred }}",
                    "rn": "ntpprov-{{ item.fabric_policy_pod_policy_datetime_servers_ipaddress }}",
                    "status": "{{ item.fabric_policy_pod_policy_datetime_status | default() }}"
                },
                "children": [
                    {
                        "datetimeRsNtpProvToEpg": {
                            "attributes": {
                                "tDn": "uni/tn-mgmt/mgmtp-{{ item.fabric_policy_pod_policy_datetime_servers_mgmt_epg }}/oob-{{ item.fabric_policy_pod_policy_datetime_servers_mgmt_epg }}",
                                "status": "{{ item.fabric_policy_pod_policy_datetime_servers_status | default() }}"
                            },
                            "children": []
                        }
                    }
                ]
            }
        }
    with_items: '{{ aci_model_data|aci_listify("fabric_policy","pod_policy","datetime","servers") }}'

  - name: Create Pod Policy Group
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/fabric/funcprof/podpgrp-{{ item.fabric_policy_pod_polgrp_name }}.json
      method: post
      content:
        {
            "fabricPodPGrp": {
                "attributes": {
                    "dn": "uni/fabric/funcprof/podpgrp-{{ item.fabric_policy_pod_polgrp_name }}",
                    "name": "{{ item.fabric_policy_pod_polgrp_name }}",
                    "rn": "podpgrp-{{ item.fabric_policy_pod_polgrp_name }}",
                    "status": "{{ item.fabric_policy_pod_polgrp_status | default() }}"
                },
                "children": [
                    {
                        "fabricRsTimePol": {
                            "attributes": {
                                "tnDatetimePolName": "{{ item.fabric_policy_pod_polgrp_datetime_pol }}",
                                "status": "created,modified"
                            },
                            "children": []
                        }
                    },
                    {
                        "fabricRsPodPGrpIsisDomP": {
                            "attributes": {
                                "tnIsisDomPolName": "{{ item.fabric_policy_pod_polgrp_isis_pol }}",
                                "status": "created,modified"
                            },
                            "children": []
                        }
                    },
                    {
                        "fabricRsPodPGrpCoopP": {
                            "attributes": {
                                "tnCoopPolName": "{{ item.fabric_policy_pod_polgrp_coop_grp_pol }}",
                                "status": "created,modified"
                            },
                            "children": []
                        }
                    },
                    {
                        "fabricRsPodPGrpBGPRRP": {
                            "attributes": {
                                "tnBgpInstPolName": "{{ item.fabric_policy_pod_polgrp_bgp_rr_pol }}",
                                "status": "created,modified"
                            },
                            "children": []
                        }
                    },
                    {
                        "fabricRsCommPol": {
                            "attributes": {
                                "tnCommPolName": "{{ item.fabric_policy_pod_polgrp_mgmt_access_pol }}",
                                "status": "created,modified"
                            },
                            "children": []
                        }
                    },
                    {
                        "fabricRsSnmpPol": {
                            "attributes": {
                                "tnSnmpPolName": "{{ item.fabric_policy_pod_polgrp_snmp_pol }}",
                                "status": "created,modified"
                            },
                            "children": []
                        }
                    },
                    {
                        "fabricRsMacsecPol": {
                            "attributes": {
                                "tnMacsecFabIfPolName": "{{ item.fabric_policy_pod_polgrp_macsec_pol }}",
                                "status": "created,modified"
                            },
                            "children": []
                        }
                    }
                ]
            }
        }
    with_items: '{{ aci_model_data|aci_listify("fabric_policy","pod_polgrp") }}'

  - name: Add Pod Policy Group to default pod selector of default Pod Profile
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/fabric/podprof-{{ item.fabric_policy_pod_profile_name }}/pods-{{ item.fabric_policy_pod_profile_pod_selector_name }}-typ-ALL.json
      method: post
      content:
        {
            "fabricRsPodPGrp": {
                "attributes": {
                    "tDn": "uni/fabric/funcprof/podpgrp-{{ item.fabric_policy_pod_profile_pod_selector_pod_pol_grp }}",
                    "status": "{{ item.fabric_policy_pod_profile_status | default() }}"
                },
                "children": []
            }
        }
    with_items: '{{ aci_model_data|aci_listify("fabric_policy","pod_profile","pod_selector") }}'

  - name: Create Virtual Port Channel protection groups
    cisco.aci.aci_switch_policy_vpc_protection_group:
      <<: *aci_login
      protection_group: '{{ item.access_policy_switch_policy_virtual_port_channel_name }}'
      protection_group_id: '{{ item.access_policy_switch_policy_virtual_port_channel_grp_id }}'
      switch_1_id: '{{ item.access_policy_switch_policy_virtual_port_channel_switch1 }}'
      switch_2_id: '{{ item.access_policy_switch_policy_virtual_port_channel_switch2 }}'
      vpc_domain_policy: '{{ item.access_policy_switch_policy_virtual_port_channel_policy }}'
      state: '{{ item.access_policy_switch_policy_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","switch_policy_virtual_port_channel") }}'

  - name: Create LLDP interface policies
    cisco.aci.aci_interface_policy_lldp:
      <<: *aci_login
      lldp_policy: '{{ item.access_policy_interface_policy_lldp_name }}'
      receive_state: '{{ item.access_policy_interface_policy_lldp_receive }}'
      transmit_state: '{{ item.access_policy_interface_policy_lldp_transmit }}'
      state: '{{ item.access_policy_interface_policy_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_lldp") }}'

  - name: Create CDP interface policies
    cisco.aci.aci_interface_policy_cdp:
      <<: *aci_login
      cdp_policy: '{{ item.access_policy_interface_policy_cdp_name }}'
      admin_state: '{{ item.access_policy_interface_policy_cdp_state }}'
      state: '{{ item.access_policy_interface_policy_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_cdp") }}'

  - name: Create port channel policies
    cisco.aci.aci_interface_policy_port_channel:
      <<: *aci_login
      port_channel: '{{ item.access_policy_interface_policy_port_channel_name }}'
      mode: '{{ item.access_policy_interface_policy_port_channel_mode }}'
      state: '{{ item.access_policy_interface_policy_port_channel_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_port_channel") }}'

  - name: Configure Link Level Policies
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/infra/hintfpol-{{ item.access_policy_interface_policy_linklevel_name }}.json
      method: post
      content:
        {
            "fabricHIfPol": {
                "attributes": {
                    "dn": "uni/infra/hintfpol-{{ item.access_policy_interface_policy_linklevel_name }}",
                    "name": "{{ item.access_policy_interface_policy_linklevel_name }}",
                    "autoNeg": "{{ item.access_policy_interface_policy_linklevel_autonegotiate | default() }}",
                    "speed": "{{ item.access_policy_interface_policy_linklevel_speed }}",
                    "linkDebounce": "{{ item.access_policy_interface_policy_linklevel_link_debounce | default() }}",
                    "fecMode": "{{ item.access_policy_interface_policy_linklevel_fec_mode | default(None) or omit }}",
                    "rn": "hintfpol-{{ item.access_policy_interface_policy_linklevel_name }}",
                    "status": "{{ item.access_policy_interface_policy_linklevel_status | default() }}"
                },
                "children": []
            }
        }
    with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_linklevel") }}'

  - name: Add VLAN pools
    cisco.aci.aci_vlan_pool:
      <<: *aci_login
      pool: '{{ item.access_policy_vlan_pool_name }}'
      pool_allocation_mode: '{{ item.access_policy_vlan_pool_alloc }}'
      state: '{{ item.access_policy_vlan_pool_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","vlan_pool") }}'

  - name: Add encapsulation blocks to VLAN pools
    cisco.aci.aci_vlan_pool_encap_block:
      <<: *aci_login
      pool: '{{ item.access_policy_vlan_pool_name }}'
      pool_allocation_mode: '{{ item.access_policy_vlan_pool_alloc }}'
      block_name: 'none'
      block_start: '{{ item.access_policy_vlan_pool_encap_block_from }}'
      block_end: '{{ item.access_policy_vlan_pool_encap_block_to }}'
      state: '{{ item.access_policy_vlan_pool_encap_block_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","vlan_pool","encap_block") }}'

  - name: Add domains
    cisco.aci.aci_domain:
      <<: *aci_login
      domain: '{{ item.access_policy_domain_name }}'
      domain_type: '{{ item.access_policy_domain_type }}'
      vm_provider: '{{ item.access_policy_domain_vm_provider | default(None) or omit }}'
      vswitch: '{{ item.access_policy_domain_vswitch_type | default(None) or omit }}'
      state: '{{ item.access_policy_domain_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","domain") }}'

  - name: Bind domains to VLAN pools
    cisco.aci.aci_domain_to_vlan_pool:
      <<: *aci_login
      domain: '{{ item.access_policy_domain_name }}'
      domain_type: '{{ item.access_policy_domain_type }}'
      pool: '{{ item.access_policy_domain_vlan_pool }}'
      pool_allocation_mode: '{{ item.access_policy_domain_vlan_pool_allocation }}'
      vm_provider: '{{ item.access_policy_domain_vm_provider | default(None) or omit }}'
      state: '{{ item.access_policy_domain_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","domain") }}'

  - name: Add AAEPs
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/infra.json
      method: post
      output_level: debug
      content:
        {
            "infraInfra": {
                "attributes": {
                    "dn": "uni/infra",
                    "status": "modified"
                },
                "children": [
                    {
                        "infraAttEntityP": {
                            "attributes": {
                                "dn": "uni/infra/attentp-{{ item.access_policy_aci_aep_name }}",
                                "name": "{{ item.access_policy_aci_aep_name }}",
                                "descr": "{{ item.access_policy_aci_aep_description }}",
                                "rn": "attentp-{{ item.access_policy_aci_aep_name }}",
                                "status": "{{ item.system_settings_bgprr_status | default() }}"
                            },
                            "children": []
                        }
                    },
                    {
                        "infraFuncP": {
                            "attributes": {
                                "dn": "uni/infra/funcprof",
                                "status": "modified"
                            },
                            "children": []
                        }
                    }
                ]
            }
        }
    with_items: '{{ aci_model_data|aci_listify("access_policy","aci_aep") }}'
   
  # THE BUILT-IN AAEP MODULE HAS AN IDEMPOTENCY BUG WHERE IT WANTS TO DESTROY AND RE-CREATE AAEPS EVERY RUN SO USING RAW REST (ABOVE)
  # - name: Add AAEPs
  #   cisco.aci.aci_aep:
  #     <<: *aci_login
  #     aep: '{{ item.access_policy_aci_aep_name }}'
  #     description: '{{ item.access_policy_aci_aep_description }}'
  #     infra_vlan: '{{ item.access_policy_aci_aep_enable_infra_vlan }}'
  #     state: '{{ item.access_policy_aci_aep_state | default("present") }}'
  #     output_level: debug
  #   with_items: '{{ aci_model_data|aci_listify("access_policy","aci_aep") }}'

  - name: Bind AAEPs to Domains
    aci_aep_to_domain:
      <<: *aci_login
      aep: '{{ item.access_policy_aci_aep_name }}'
      domain: '{{ item.access_policy_aci_aep_domains_name }}'
      domain_type: '{{ item.access_policy_aci_aep_domains_type }}'
      vm_provider: '{{ item.access_policy_aci_aep_domains_vm_provider | default(None) or omit }}'
      state: '{{ item.access_policy_aci_aep_domains_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","aci_aep","domains") }}'

  # ***********TIER2 CONFIGURATIONS**************
  - name: Add leaf interface policy groups
    cisco.aci.aci_interface_policy_leaf_policy_group:
      <<: *aci_login
      policy_group: '{{ item.access_policy_interface_policy_group_name }}'
      description: '{{ item.access_policy_interface_policy_group_description | default(None) }}'
      lag_type: '{{ item.access_policy_interface_policy_group_type | default(None) or omit }}'
      port_channel_policy: '{{ item.access_policy_interface_policy_group_port_channel_policy | default(None) or omit }}'
      aep: '{{ item.access_policy_interface_policy_group_aaep | default(None) or omit }}'
      port_security_policy:  '{{ item.access_policy_interface_policy_group_port_security_policy | default(None) or omit }}'
      stp_interface_policy: '{{ item.access_policy_interface_policy_group_stp_interface_policy | default(None) or omit }}'
      cdp_policy: '{{ item.access_policy_interface_policy_group_cdp_pol | default(None) or omit }}'
      lldp_policy: '{{ item.access_policy_interface_policy_group_lldp_pol | default(None) or omit }}'
      link_level_policy: '{{ item.access_policy_interface_policy_group_lacp_pol | default(None) or omit }}'
      mcp_policy: '{{ item.access_policy_interface_policy_group_mcp_policy | default(None) or omit }}'
      monitoring_policy: '{{ item.access_policy_interface_policy_group_monitoring_policy | default(None) or omit }}'
      l2_interface_policy: '{{ item.access_policy_interface_policy_group_l2_interface_policy | default(None) or omit }}'
      state: '{{ item.access_policy_interface_policy_group_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_group") }}'

  - name: Add interface policy profiles
    cisco.aci.aci_interface_policy_leaf_profile:
      <<: *aci_login
      leaf_interface_profile: '{{ item.access_policy_interface_policy_profile_name }}'
      state: '{{ item.access_policy_interface_policy_profile_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_profile") }}'

  - name: Associate an Interface Access Port Selector to an Interface Policy Leaf Profile with a Policy Group
    cisco.aci.aci_access_port_to_interface_policy_leaf_profile:
      <<: *aci_login
      leaf_interface_profile: '{{ item.access_policy_interface_policy_profile_name }}'
      access_port_selector: '{{ item.access_policy_interface_policy_profile_port_selector_name }}'
      leaf_port_blk: '{{ item.access_policy_interface_policy_profile_port_selector_name }}'
      from_port: '{{ item.access_policy_interface_policy_profile_port_selector_from | default(None) or omit }}'
      to_port: '{{ item.access_policy_interface_policy_profile_port_selector_to | default(None) or omit }}'
      policy_group: '{{ item.access_policy_interface_policy_profile_port_selector_policy_grp | default(None) or omit }}'
      state: '{{ item.access_policy_interface_policy_profile_port_selector_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_profile","port_selector") }}'

  - name: Add leaf switch profiles
    cisco.aci.aci_switch_policy_leaf_profile:
      <<: *aci_login
      leaf_profile: '{{ item.access_policy_switch_policy_profile_name }}'
      description: '{{ item.access_policy_switch_policy_profile_description | default("") }}'
      state: '{{ item.access_policy_switch_policy_profile_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","switch_policy_profile") }}'

  - name: Bind leaf selectors to switch profiles
    cisco.aci.aci_switch_leaf_selector:
      <<: *aci_login
      leaf_profile: '{{ item.access_policy_switch_policy_profile_name }}'
      leaf: '{{ item.access_policy_switch_policy_profile_leaf_selector_name }}'
      description: '{{ item.access_policy_switch_policy_profile_leaf_selector_description | default("") }}'
      from: '{{ item.access_policy_switch_policy_profile_leaf_selector_from }}'
      to: '{{ item.access_policy_switch_policy_profile_leaf_selector_to }}'
      leaf_node_blk: none
      state: '{{ item.access_policy_switch_policy_profile_leaf_selector_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","switch_policy_profile","leaf_selector") }}'

  - name: Bind interface selector profiles to switch profiles
    cisco.aci.aci_interface_selector_to_switch_policy_leaf_profile:
      <<: *aci_login
      interface_selector: '{{ item.access_policy_switch_policy_profile_interface_selector_profile_name }}'
      leaf_profile: '{{ item.access_policy_switch_policy_profile_name }}'
      state: '{{ item.access_policy_switch_policy_profile_interface_selector_profile_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","switch_policy_profile","interface_selector_profile") }}'

  
  # ***********TIER3 CONFIGURATIONS**************
  - name: Create tenants
    cisco.aci.aci_tenant:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      description: '{{ item.tenant_description }}'
      state: '{{ item.tenant_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant") }}'

  - name: Create VRFs
    cisco.aci.aci_vrf:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      vrf_name: '{{ item.tenant_vrf_name }}'
      state: '{{ item.tenant_vrf_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","vrf") }}'

  - name: Set VRF Preferred Group Status
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/tn-Nordam-Prod/ctx-{{ item.tenant_vrf_name }}/any.json
      method: post
      content:
        {
            "vzAny": {
                "attributes": {
                    "dn": "uni/tn-Nordam-Prod/ctx-{{ item.tenant_vrf_name }}/any",
                    "prefGrMemb": "{{ item.tenant_vrf_pref_grp }}"
                },
                "children": []
            }
        }
    with_items: '{{ aci_model_data|aci_listify("tenant","vrf") }}'

  - name: Add a new L3Out
    # L3 protocols = bgp, eigrp, ospf, pim, static
    cisco.aci.aci_l3out:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      name: '{{ item.tenant_l3o_name }}'
      description: '{{ item.tenant_l3o_description | default(None) or omit }}'
      domain: '{{ item.tenant_l3o_domain }}'
      vrf: '{{ item.tenant_l3o_vrf }}'
      l3protocol: '{{ item.tenant_l3o_l3protocol }}'
      asn: '{{ item.tenant_l3o_eigrp_asn | default(None) or omit }}'
      route_control: '{{ item.tenant_l3o_route_control }}'
      state: '{{ item.tenant_l3o_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","l3o") }}'

  - name: Configure OSPF Area
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/ospfExtP.json
      method: post
      content:
        {
            "ospfExtP": {
                "attributes": {
                    "dn": "uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/ospfExtP",
                    "areaId": "{{ item.tenant_l3o_ospf_area_id }}",
                    "areaType": "{{ item.tenant_l3o_ospf_area_type }}"
                },
                "children": []
            }
        }
    with_items: '{{ aci_model_data|aci_listify("tenant","l3o","ospf") }}'

  - name: Add a new L3Out EPG
    cisco.aci.aci_l3out_extepg:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      l3out: '{{ item.tenant_l3o_name }}'
      name: '{{ item.tenant_l3o_epg_name }}'
      description: '{{ item.tenant_l3o_epg_description | default(None) or omit }}'
      preferred_group: '{{ item.tenant_l3o_epg_preferred_group }}'
      state: '{{ item.tenant_l3o_epg_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","l3o","epg") }}'

  - name: Add a new L3Out External Subnet
    # Scope: export-rtctrl, import-security, shared-rtctrl, shared-security
    cisco.aci.aci_l3out_extsubnet:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      l3out: '{{ item.tenant_l3o_name }}'
      extepg: '{{ item.tenant_l3o_epg_name }}'
      description: '{{ item.tenant_l3o_epg_extsubnet_description | default(None) or omit }}'
      network: '{{ item.tenant_l3o_epg_extsubnet_network }}'
      scope: '{{ item.tenant_l3o_epg_extsubnet_scope }}'
      state: '{{ item.tenant_l3o_epg_extsubnet_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","l3o","epg","extsubnet") }}'

  - name: Configure L3Out Node Profile
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/mo/uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/lnodep-{{ item.tenant_l3o_node_profile_name }}.json
      method: post
      content:
        {
          "l3extLNodeP": {
              "attributes": {
                  "dn": "uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/lnodep-{{ item.tenant_l3o_node_profile_name }}",
                  "name": "{{ item.tenant_l3o_node_profile_name }}",
                  "rn": "lnodep-{{ item.tenant_l3o_node_profile_name }}",
                  "status": "{{ item.tenant_l3o_node_profile_status | default() }}"
              },
              "children": [
                  {
                      "l3extRsNodeL3OutAtt": {
                          "attributes": {
                              "dn": "uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/lnodep-{{ item.tenant_l3o_node_profile_name }}/rsnodeL3OutAtt-[topology/pod-{{ item.tenant_l3o_node_profile_pod }}/node-{{ item.tenant_l3o_node_profile_node_node_id }}]",
                              "tDn": "topology/pod-{{ item.tenant_l3o_node_profile_pod }}/node-{{ item.tenant_l3o_node_profile_node_node_id }}",
                              "rtrId": "{{ item.tenant_l3o_node_profile_node_router_id }}",
                              "rn": "rsnodeL3OutAtt-[topology/pod-{{ item.tenant_l3o_node_profile_pod }}/node-{{ item.tenant_l3o_node_profile_node_node_id }}]",
                              "status": "{{ item.tenant_l3o_node_profile_node_status | default() }}"
                          },
                          "children": []
                      }
                  }
              ]
          }
      }
    with_items: '{{ aci_model_data|aci_listify("tenant","l3o","node_profile","node") }}'

  - name: Configure L3Out Logical Interface Profiles
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/lnodep-{{ item.tenant_l3o_node_profile_name }}/lifp-{{ item.tenant_l3o_node_profile_logical_int_pro_name }}.json
      method: post
      content:
        {
            "l3extLIfP": {
                "attributes": {
                    "dn": "uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/lnodep-{{ item.tenant_l3o_node_profile_name }}/lifp-{{ item.tenant_l3o_node_profile_logical_int_pro_name }}",
                    "name": "{{ item.tenant_l3o_node_profile_logical_int_pro_name }}",
                    "rn": "lifp-{{ item.tenant_l3o_node_profile_logical_int_pro_name }}",
                    "status": "{{ item.system_settings_bgprr_status | default() }}"
                },
                "children": [
                    {
                        "l3extRsPathL3OutAtt": {
                            "attributes": {
                                "dn": "uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/lnodep-{{ item.tenant_l3o_node_profile_name }}/lifp-{{ item.tenant_l3o_node_profile_logical_int_pro_name }}/rspathL3OutAtt-[topology/pod-{{ item.tenant_l3o_node_profile_pod }}/paths-{{ item.tenant_l3o_node_profile_logical_int_pro_paths_leaf_id }}/pathep-[eth{{ item.tenant_l3o_node_profile_logical_int_pro_paths_port }}]]",
                                "ifInstT": "l3-port",
                                "addr": "{{ item.tenant_l3o_node_profile_logical_int_pro_paths_ip_address }}",
                                "tDn": "topology/pod-{{ item.tenant_l3o_node_profile_pod }}/paths-{{ item.tenant_l3o_node_profile_logical_int_pro_paths_leaf_id }}/pathep-[eth{{ item.tenant_l3o_node_profile_logical_int_pro_paths_port }}]",
                                "rn": "rspathL3OutAtt-[topology/pod-{{ item.tenant_l3o_node_profile_pod }}/paths-{{ item.tenant_l3o_node_profile_logical_int_pro_paths_leaf_id }}/pathep-[eth{{ item.tenant_l3o_node_profile_logical_int_pro_paths_port }}]]",
                                "status": "{{ item.system_settings_bgprr_status | default() }}"
                            },
                            "children": []
                        }
                    }
                ]
            }
        }
    with_items: '{{ aci_model_data|aci_listify("tenant","l3o","node_profile","logical_int_pro","paths") }}'

  - name: Create BDs
    cisco.aci.aci_bd:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      vrf: '{{ item.tenant_bd_vrf }}'
      bd: '{{ item.tenant_bd_name }}'
      l2_unknown_unicast: '{{ item.tenant_bd_l2_unk_uni }}'
      arp_flooding: '{{ item.tenant_bd_arp_flood }}'
      enable_routing: '{{ item.tenant_bd_enable_routing }}'
      state: '{{ item.tenant_bd_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","bd") }}'

  - name: Add Subnets to BDs
    cisco.aci.aci_bd_subnet:
        <<: *aci_login
        tenant: '{{ item.tenant_name }}'
        bd: '{{ item.tenant_bd_name }}'
        gateway: '{{ item.tenant_bd_subnet_gateway }}'
        mask: '{{ item.tenant_bd_subnet_cidr_mask }}'
        enable_vip: '{{ item.tenant_bd_subnet_vip }}'
        preferred: '{{ item.tenant_bd_subnet_preferred }}'
        scope: '{{ item.tenant_bd_subnet_scope }}'
        subnet_control: '{{ item.tenant_bd_subnet_subnet_control | default("unspecified") }}'
        state: '{{ item.tenant_bd_subnet_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","bd","subnet") }}'

  - name: Create Application Profiles
    cisco.aci.aci_ap:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      app_profile: '{{ item.tenant_app_name }}'
      state: '{{ item.tenant_app_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","app") }}'

  - name: Create EPGs
    cisco.aci.aci_epg:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      app_profile: '{{ item.tenant_app_name }}'
      epg: '{{ item.tenant_app_epg_name }}'
      bd: '{{ item.tenant_app_epg_bd }}'
      preferred_group: '{{ item.tenant_app_epg_pref_grp }}'
      state: '{{ item.tenant_app_epg_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","app","epg") }}'

  - name: Attach Application EPGs to AAEP
    cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni/infra/attentp-{{ item.access_policy_aci_aep_name }}/gen-default.json
        method: post
        content:
            {
                "infraGeneric": {
                    "attributes": {
                        "dn": "uni/infra/attentp-{{ item.access_policy_aci_aep_name }}/gen-default",
                        "name": "default",
                        "status": "{{ item.access_policy_aci_aep_epg_status | default() }}"
                    },
                    "children": [
                        {
                            "infraRsFuncToEpg": {
                                "attributes": {
                                    "tDn": "uni/tn-{{ item.access_policy_aci_aep_epg_tenant }}/ap-{{ item.access_policy_aci_aep_epg_ap }}/epg-{{ item.access_policy_aci_aep_epg_name }}",
                                    "status": "created,modified",
                                    "encap": "vlan-{{ item.access_policy_aci_aep_epg_vlan }}",
                                    "mode": "{{ item.access_policy_aci_aep_epg_mode }}"
                                },
                                "children": []
                            }
                        }
                    ]
                }
            }
    with_items: '{{ aci_model_data|aci_listify("access_policy","aci_aep","epg") }}'

  - name: Create Filters
    cisco.aci.aci_filter:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      filter: '{{ item.tenant_filter_name }}'
      description: '{{ item.tenant_filter_description }}'
      state: '{{ item.tenant_filter_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","filter") }}'

  - name: Create Filter Entries
    cisco.aci.aci_filter_entry:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      filter: '{{ item.tenant_filter_name }}'
      entry: '{{ item.tenant_filter_entry_name }}'
      ether_type: '{{ item.tenant_filter_entry_ether_type | default("unspecified") }}'
      ip_protocol: '{{ item.tenant_filter_entry_ip_protocol | default("unspecified") }}'
      icmp_msg_type: '{{ item.tenant_filter_entry_icmp_msg_type | default("unspecified") }}'
      stateful: '{{ item.tenant_filter_entry_stateful }}'
      dst_port_start: '{{ item.tenant_filter_entry_dst_port_start | default("unspecified") }}'
      dst_port_end: '{{ item.tenant_filter_entry_dst_port_end | default("unspecified") }}'
      state: '{{ item.tenant_filter_entry_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","filter","entry") }}'

  - name: Create contracts
    cisco.aci.aci_contract:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      contract: '{{ item.tenant_contract_name }}'
      scope: '{{ item.tenant_contract_scope }}'
      state: '{{ item.tenant_contract_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","contract") }}'

  - name: Create contract subjects
    cisco.aci.aci_contract_subject:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      contract: '{{ item.tenant_contract_name }}'
      contract_subject: '{{ item.tenant_contract_subject_name }}'
      reverse_filter: '{{ item.tenant_contract_subject_reverse_filter }}'
      state: '{{ item.tenant_contract_subject_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","contract","subject") }}'

  - name: Bind contract subjects to filters
    cisco.aci.aci_contract_subject_to_filter:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      contract: '{{ item.tenant_contract_name }}'
      contract_subject: '{{ item.tenant_contract_subject_name }}'
      filter: '{{ item.tenant_contract_subject_filter }}'
      state: '{{ item.tenant_contract_subject_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","contract","subject") }}'

  - name: Bind EPGs to contracts
    cisco.aci.aci_epg_to_contract:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      app_profile: '{{ item.tenant_app_name }}'
      epg: '{{ item.tenant_app_epg_name }}'
      contract: '{{ item.tenant_app_epg_contract_name }}'
      contract_type: '{{ item.tenant_app_epg_contract_type }}'
      state: '{{ item.tenant_app_epg_contract_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","app","epg","contract") }}'

  - name: Bind L3Out EPGs to Contracts
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/mo/uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/instP-{{ item.tenant_l3o_epg_name }}.json
      method: post
      content:
        {
            "fvRsProv": {
                "attributes": {
                    "tnVzBrCPName": "{{ item.tenant_l3o_epg_provided_contract_name }}",
                    "status": "{{ item.tenant_l3o_epg_provided_contract_status | default() }}"
                },
                "children": []
            }
        }
    with_items: '{{ aci_model_data|aci_listify("tenant","l3o","epg","provided_contract") }}'

  - name: Create VRF EPG Collection (vzANY)
    cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni/tn-{{ item.tenant_name }}/ctx-{{ item.tenant_vrf_name }}/any.json
        method: post
        content:
            {
                "vzRsAnyToCons": {
                    "attributes": {
                        "tnVzBrCPName": "{{ item.tenant_vrf_epg_collection_consumed_contracts_contract }}",
                        "status": "{{ item.tenant_vrf_epg_collection_consumed_contracts_status | default() }}"
                    },
                    "children": []
                }
            }
    with_items: '{{ aci_model_data|aci_listify("tenant","vrf","epg_collection_consumed_contracts","contract") }}'

  - name: Associate BDs to L3Outs
    cisco.aci.aci_bd_to_l3out:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      bd: '{{ item.tenant_bd_name }}'
      l3out: '{{ item.tenant_bd_l3out_name }}'
      state: '{{ item.tenant_bd_l3out_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","bd","l3out") }}'

  - name: Bind EPGs to domains
    cisco.aci.aci_epg_to_domain:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      app_profile: '{{ item.tenant_app_name }}'
      epg: '{{ item.tenant_app_epg_name }}'
      domain: '{{ item.tenant_app_epg_domains_name | default(None) or omit }}'
      domain_type: '{{ item.tenant_app_epg_domains_type | default(None) or omit }}'
      vm_provider: '{{ item.tenant_app_epg_domains_vm_provider | default(None) or omit }}'
      state: '{{ item.tenant_app_epg_domains_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","app","epg","domains") }}'

  - name: Create EPG static paths
    cisco.aci.aci_static_binding_to_epg:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      ap: '{{ item.tenant_app_name }}'
      epg: '{{ item.tenant_app_epg_name }}'
      deploy_immediacy: '{{ item.tenant_app_epg_static_paths_immediacy }}'
      encap_id: '{{ item.tenant_app_epg_static_paths_encap_id }}'
      interface: '{{ item.tenant_app_epg_static_paths_interface }}'
      interface_mode: '{{ item.tenant_app_epg_static_paths_interface_mode }}'
      interface_type: '{{ item.tenant_app_epg_static_paths_interface_type }}'
      leafs: '{{ item.tenant_app_epg_static_paths_leafs }}'
      pod_id: '{{ item.tenant_app_epg_static_paths_pod_id }}'
      state: '{{ item.tenant_app_epg_static_paths_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","app","epg","static_paths") }}'
    when: item.tenant_app_epg_static_paths_interface is defined
