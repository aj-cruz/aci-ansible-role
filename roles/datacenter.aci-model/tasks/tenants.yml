- name: Push aci_model

  # We prepare an aci_login anchor for convenience
  vars:
    aci_login: &aci_login
      hostname: '{{ apic_host }}'
      username: '{{ apic_username }}'
      password: '{{ apic_password }}'
      use_proxy: '{{ apic_use_proxy }}'
      validate_certs: '{{ apic_validate_certs }}'

  # We define the delegate_to at the block-level
  delegate_to: localhost

  block:
  - name: Create tenants
    cisco.aci.aci_tenant:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      description: '{{ item.tenant_description }}'
      state: '{{ item.tenant_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant") }}'

  - name: Create VRFs
    cisco.aci.aci_vrf:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      vrf_name: '{{ item.tenant_vrf_name }}'
      state: '{{ item.tenant_vrf_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","vrf") }}'

  - name: Set VRF Preferred Group Status
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/tn-{{ item.tenant_name }}/ctx-{{ item.tenant_vrf_name }}/any.json
      method: post
      content:
        {
            "vzAny": {
                "attributes": {
                    "dn": "uni/tn-{{ item.tenant_name }}/ctx-{{ item.tenant_vrf_name }}/any",
                    "prefGrMemb": "{{ item.tenant_vrf_pref_grp }}"
                },
                "children": []
            }
        }
    with_items: '{{ aci_model_data|aci_listify("tenant","vrf") }}'

  - name: Create Tenant BFD Protocol Policies (REST)
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/tn-{{ item.tenant_name }}/bfdIfPol-{{ item.tenant_protocol_policy_bfd_name }}.json
      method: post
      content:
        {
            "bfdIfPol": {
                "attributes": {
                    "dn": "uni/tn-{{ item.tenant_name }}/bfdIfPol-{{ item.tenant_protocol_policy_bfd_name }}",
                    "name": "{{ item.tenant_protocol_policy_bfd_name }}",
                    "ctrl": "{{ item.tenant_protocol_policy_bfd_ctrl }}",
                    "detectMult": "{{ item.tenant_protocol_policy_bfd_detectMult }}",
                    "minTxIntvl": "{{ item.tenant_protocol_policy_bfd_minTxInterval }}",
                    "minRxIntvl": "{{ item.tenant_protocol_policy_bfd_minRxInterval }}",
                    "echoRxIntvl": "{{ item.tenant_protocol_policy_bfd_echoRxInterval }}",
                    "echoAdminSt": "{{ item.tenant_protocol_policy_bfd_echoAdminSt }}",
                    "adminSt": "{{ item.tenant_protocol_policy_bfd_adminSt }}",
                    "rn": "bfdIfPol-{{ item.tenant_protocol_policy_bfd_name }}",
                    "status": '{{ item.tenant_protocol_policy_bfd_state | default() }}'
                },
                "children": []
            }
        }
    with_items: '{{ aci_model_data|aci_listify("tenant", "protocol_policy", "bfd") }}'

  - name: Create Tenant OSPF Interface Protocol Policies (REST)
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/tn-{{ item.tenant_name }}/ospfIfPol-{{ item.tenant_protocol_policy_ospf_interface_name }}.json
      method: post
      content:
        {
            "ospfIfPol": {
                "attributes": {
                    "dn": "uni/tn-{{ item.tenant_name }}/ospfIfPol-{{ item.tenant_protocol_policy_ospf_interface_name }}",
                    "name": "{{ item.tenant_protocol_policy_ospf_interface_name }}",
                    "nwT": "{{ item.tenant_protocol_policy_ospf_interface_netType }}",
                    "prio": "{{ item.tenant_protocol_policy_ospf_interface_priority }}",
                    "cost": "{{ item.tenant_protocol_policy_ospf_interface_intCost }}",
                    "ctrl": "{{ item.tenant_protocol_policy_ospf_interface_ctrl }}",
                    "helloIntvl": "{{ item.tenant_protocol_policy_ospf_interface_helloInt }}",
                    "deadIntvl": "{{ item.tenant_protocol_policy_ospf_interface_deadInt }}",
                    "rexmitIntvl": "{{ item.tenant_protocol_policy_ospf_interface_retransInt }}",
                    "xmitDelay": "{{ item.tenant_protocol_policy_ospf_interface_transDelay }}",
                    "rn": "ospfIfPol-{{ item.tenant_protocol_policy_ospf_interface_name }}",
                    "status": '{{ item.tenant_protocol_policy_ospf_interface_state | default() }}'
                },
                "children": []
            }
        }
    with_items: '{{ aci_model_data|aci_listify("tenant", "protocol_policy", "ospf_interface") }}'  

  - name: Add a new L3Out
    # L3 protocols = bgp, eigrp, ospf, pim, static
    cisco.aci.aci_l3out:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      name: '{{ item.tenant_l3o_name }}'
      description: '{{ item.tenant_l3o_description | default(None) or omit }}'
      domain: '{{ item.tenant_l3o_domain }}'
      vrf: '{{ item.tenant_l3o_vrf }}'
      l3protocol: '{{ item.tenant_l3o_l3protocol }}'
      asn: '{{ item.tenant_l3o_asn | default(None) or omit }}'
      route_control: '{{ item.tenant_l3o_route_control }}'
      state: '{{ item.tenant_l3o_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","l3o") }}'

  - name: Configure OSPF Area (REST)
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/ospfExtP.json
      method: post
      content:
        {
            "ospfExtP": {
                "attributes": {
                    "dn": "uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/ospfExtP",
                    "areaId": "{{ item.tenant_l3o_ospf_area_id }}",
                    "areaType": "{{ item.tenant_l3o_ospf_area_type }}"
                },
                "children": []
            }
        }
    with_items: '{{ aci_model_data|aci_listify("tenant","l3o","ospf") }}'

  - name: Add a new L3Out EPG
    cisco.aci.aci_l3out_extepg:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      l3out: '{{ item.tenant_l3o_name }}'
      name: '{{ item.tenant_l3o_epg_name }}'
      description: '{{ item.tenant_l3o_epg_description | default(None) or omit }}'
      preferred_group: '{{ item.tenant_l3o_epg_preferred_group }}'
      state: '{{ item.tenant_l3o_epg_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","l3o","epg") }}'

  - name: Add a new L3Out External Subnet
    # Scope: export-rtctrl, import-security, shared-rtctrl, shared-security
    cisco.aci.aci_l3out_extsubnet:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      l3out: '{{ item.tenant_l3o_name }}'
      extepg: '{{ item.tenant_l3o_epg_name }}'
      description: '{{ item.tenant_l3o_epg_extsubnet_description | default(None) or omit }}'
      network: '{{ item.tenant_l3o_epg_extsubnet_network }}'
      scope: '{{ item.tenant_l3o_epg_extsubnet_scope }}'
      state: '{{ item.tenant_l3o_epg_extsubnet_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","l3o","epg","extsubnet") }}'

  - name: Configure L3Out Node Profile (REST)
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/mo/uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/lnodep-{{ item.tenant_l3o_node_profile_name }}.json
      method: post
      content:
        {
          "l3extLNodeP": {
              "attributes": {
                  "dn": "uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/lnodep-{{ item.tenant_l3o_node_profile_name }}",
                  "name": "{{ item.tenant_l3o_node_profile_name }}",
                  "rn": "lnodep-{{ item.tenant_l3o_node_profile_name }}",
                  "status": "{{ item.tenant_l3o_node_profile_status | default() }}"
              },
              "children": [
                  {
                      "l3extRsNodeL3OutAtt": {
                          "attributes": {
                              "dn": "uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/lnodep-{{ item.tenant_l3o_node_profile_name }}/rsnodeL3OutAtt-[topology/pod-{{ item.tenant_l3o_node_profile_pod }}/node-{{ item.tenant_l3o_node_profile_node_node_id }}]",
                              "tDn": "topology/pod-{{ item.tenant_l3o_node_profile_pod }}/node-{{ item.tenant_l3o_node_profile_node_node_id }}",
                              "rtrId": "{{ item.tenant_l3o_node_profile_node_router_id }}",
                              "rn": "rsnodeL3OutAtt-[topology/pod-{{ item.tenant_l3o_node_profile_pod }}/node-{{ item.tenant_l3o_node_profile_node_node_id }}]",
                              "status": "{{ item.tenant_l3o_node_profile_node_status | default() }}"
                          },
                          "children": []
                      }
                  }
              ]
          }
      }
    with_items: '{{ aci_model_data|aci_listify("tenant","l3o","node_profile","node") }}'

  - name: Configure L3Out Logical Interface Profiles (REST)
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/lnodep-{{ item.tenant_l3o_node_profile_name }}/lifp-{{ item.tenant_l3o_node_profile_logical_int_pro_name }}.json
      method: post
      content:
        {
            "l3extLIfP": {
                "attributes": {
                    "dn": "uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/lnodep-{{ item.tenant_l3o_node_profile_name }}/lifp-{{ item.tenant_l3o_node_profile_logical_int_pro_name }}",
                    "name": "{{ item.tenant_l3o_node_profile_logical_int_pro_name }}",
                    "rn": "lifp-{{ item.tenant_l3o_node_profile_logical_int_pro_name }}",
                    "status": "{{ item.system_settings_bgprr_status | default() }}"
                },
                "children": [
                    {
                        "l3extRsPathL3OutAtt": {
                            "attributes": {
                                "dn": "uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/lnodep-{{ item.tenant_l3o_node_profile_name }}/lifp-{{ item.tenant_l3o_node_profile_logical_int_pro_name }}/rspathL3OutAtt-[topology/pod-{{ item.tenant_l3o_node_profile_pod }}/paths-{{ item.tenant_l3o_node_profile_logical_int_pro_paths_leaf_id }}/pathep-[eth{{ item.tenant_l3o_node_profile_logical_int_pro_paths_port }}]]",
                                "ifInstT": "l3-port",
                                "addr": "{{ item.tenant_l3o_node_profile_logical_int_pro_paths_ip_address }}",
                                "tDn": "topology/pod-{{ item.tenant_l3o_node_profile_pod }}/paths-{{ item.tenant_l3o_node_profile_logical_int_pro_paths_leaf_id }}/pathep-[eth{{ item.tenant_l3o_node_profile_logical_int_pro_paths_port }}]",
                                "rn": "rspathL3OutAtt-[topology/pod-{{ item.tenant_l3o_node_profile_pod }}/paths-{{ item.tenant_l3o_node_profile_logical_int_pro_paths_leaf_id }}/pathep-[eth{{ item.tenant_l3o_node_profile_logical_int_pro_paths_port }}]]",
                                "status": "{{ item.system_settings_bgprr_status | default() }}"
                            },
                            "children": []
                        }
                    }
                ]
            }
        }
    with_items: '{{ aci_model_data|aci_listify("tenant","l3o","node_profile","logical_int_pro","paths") }}'

  - name: Create BDs
    cisco.aci.aci_bd:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      vrf: '{{ item.tenant_bd_vrf }}'
      bd: '{{ item.tenant_bd_name }}'
      l2_unknown_unicast: '{{ item.tenant_bd_l2_unk_uni }}'
      arp_flooding: '{{ item.tenant_bd_arp_flood }}'
      enable_routing: '{{ item.tenant_bd_enable_routing }}'
      state: '{{ item.tenant_bd_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","bd") }}'

  - name: Add Subnets to BDs
    cisco.aci.aci_bd_subnet:
        <<: *aci_login
        tenant: '{{ item.tenant_name }}'
        bd: '{{ item.tenant_bd_name }}'
        gateway: '{{ item.tenant_bd_subnet_gateway }}'
        mask: '{{ item.tenant_bd_subnet_cidr_mask }}'
        enable_vip: '{{ item.tenant_bd_subnet_vip }}'
        preferred: '{{ item.tenant_bd_subnet_preferred }}'
        scope: '{{ item.tenant_bd_subnet_scope }}'
        subnet_control: '{{ item.tenant_bd_subnet_subnet_control | default("unspecified") }}'
        state: '{{ item.tenant_bd_subnet_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","bd","subnet") }}'

  - name: Create Application Profiles
    cisco.aci.aci_ap:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      app_profile: '{{ item.tenant_app_name }}'
      state: '{{ item.tenant_app_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","app") }}'

  - name: Create EPGs
    cisco.aci.aci_epg:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      app_profile: '{{ item.tenant_app_name }}'
      epg: '{{ item.tenant_app_epg_name }}'
      bd: '{{ item.tenant_app_epg_bd }}'
      preferred_group: '{{ item.tenant_app_epg_pref_grp }}'
      state: '{{ item.tenant_app_epg_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","app","epg") }}'

  - name: Attach Application EPGs to AAEP (REST)
    cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni/infra/attentp-{{ item.access_policy_aci_aep_name }}/gen-default.json
        method: post
        content:
            {
                "infraGeneric": {
                    "attributes": {
                        "dn": "uni/infra/attentp-{{ item.access_policy_aci_aep_name }}/gen-default",
                        "name": "default",
                        "status": "{{ item.access_policy_aci_aep_epg_status | default() }}"
                    },
                    "children": [
                        {
                            "infraRsFuncToEpg": {
                                "attributes": {
                                    "tDn": "uni/tn-{{ item.access_policy_aci_aep_epg_tenant }}/ap-{{ item.access_policy_aci_aep_epg_ap }}/epg-{{ item.access_policy_aci_aep_epg_name }}",
                                    "status": "created,modified",
                                    "encap": "vlan-{{ item.access_policy_aci_aep_epg_vlan }}",
                                    "mode": "{{ item.access_policy_aci_aep_epg_mode }}"
                                },
                                "children": []
                            }
                        }
                    ]
                }
            }
    with_items: '{{ aci_model_data|aci_listify("access_policy","aci_aep","epg") }}'

  - name: Create Filters
    cisco.aci.aci_filter:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      filter: '{{ item.tenant_filter_name }}'
      description: '{{ item.tenant_filter_description }}'
      state: '{{ item.tenant_filter_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","filter") }}'

  - name: Create Filter Entries
    cisco.aci.aci_filter_entry:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      filter: '{{ item.tenant_filter_name }}'
      entry: '{{ item.tenant_filter_entry_name }}'
      ether_type: '{{ item.tenant_filter_entry_ether_type | default("unspecified") }}'
      ip_protocol: '{{ item.tenant_filter_entry_ip_protocol | default("unspecified") }}'
      icmp_msg_type: '{{ item.tenant_filter_entry_icmp_msg_type | default("unspecified") }}'
      stateful: '{{ item.tenant_filter_entry_stateful }}'
      dst_port_start: '{{ item.tenant_filter_entry_dst_port_start | default("unspecified") }}'
      dst_port_end: '{{ item.tenant_filter_entry_dst_port_end | default("unspecified") }}'
      state: '{{ item.tenant_filter_entry_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","filter","entry") }}'

  - name: Create contracts
    cisco.aci.aci_contract:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      contract: '{{ item.tenant_contract_name }}'
      scope: '{{ item.tenant_contract_scope }}'
      state: '{{ item.tenant_contract_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","contract") }}'

  - name: Create contract subjects
    cisco.aci.aci_contract_subject:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      contract: '{{ item.tenant_contract_name }}'
      contract_subject: '{{ item.tenant_contract_subject_name }}'
      reverse_filter: '{{ item.tenant_contract_subject_reverse_filter }}'
      state: '{{ item.tenant_contract_subject_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","contract","subject") }}'

  - name: Bind contract subjects to filters
    cisco.aci.aci_contract_subject_to_filter:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      contract: '{{ item.tenant_contract_name }}'
      contract_subject: '{{ item.tenant_contract_subject_name }}'
      filter: '{{ item.tenant_contract_subject_filter }}'
      state: '{{ item.tenant_contract_subject_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","contract","subject") }}'

  - name: Bind EPGs to contracts
    cisco.aci.aci_epg_to_contract:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      app_profile: '{{ item.tenant_app_name }}'
      epg: '{{ item.tenant_app_epg_name }}'
      contract: '{{ item.tenant_app_epg_contract_name }}'
      contract_type: '{{ item.tenant_app_epg_contract_type }}'
      state: '{{ item.tenant_app_epg_contract_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","app","epg","contract") }}'

  - name: Bind L3Out EPGs to Contracts (REST)
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/mo/uni/tn-{{ item.tenant_name }}/out-{{ item.tenant_l3o_name }}/instP-{{ item.tenant_l3o_epg_name }}.json
      method: post
      content:
        {
            "fvRsProv": {
                "attributes": {
                    "tnVzBrCPName": "{{ item.tenant_l3o_epg_provided_contract_name }}",
                    "status": "{{ item.tenant_l3o_epg_provided_contract_status | default() }}"
                },
                "children": []
            }
        }
    with_items: '{{ aci_model_data|aci_listify("tenant","l3o","epg","provided_contract") }}'

  - name: Create VRF EPG Collection (vzANY) (REST)
    cisco.aci.aci_rest:
        <<: *aci_login
        path: /api/mo/uni/tn-{{ item.tenant_name }}/ctx-{{ item.tenant_vrf_name }}/any.json
        method: post
        content:
            {
                "vzRsAnyToCons": {
                    "attributes": {
                        "tnVzBrCPName": "{{ item.tenant_vrf_epg_collection_consumed_contracts_contract }}",
                        "status": "{{ item.tenant_vrf_epg_collection_consumed_contracts_status | default() }}"
                    },
                    "children": []
                }
            }
    with_items: '{{ aci_model_data|aci_listify("tenant","vrf","epg_collection_consumed_contracts","contract") }}'

  - name: Associate BDs to L3Outs
    cisco.aci.aci_bd_to_l3out:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      bd: '{{ item.tenant_bd_name }}'
      l3out: '{{ item.tenant_bd_l3out_name }}'
      state: '{{ item.tenant_bd_l3out_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","bd","l3out") }}'

  - name: Bind EPGs to domains
    cisco.aci.aci_epg_to_domain:
      <<: *aci_login
      tenant: '{{ item.tenant_name }}'
      app_profile: '{{ item.tenant_app_name }}'
      epg: '{{ item.tenant_app_epg_name }}'
      domain: '{{ item.tenant_app_epg_domains_name | default(None) or omit }}'
      domain_type: '{{ item.tenant_app_epg_domains_type | default(None) or omit }}'
      vm_provider: '{{ item.tenant_app_epg_domains_vm_provider | default(None) or omit }}'
      state: '{{ item.tenant_app_epg_domains_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("tenant","app","epg","domains") }}'

  - name: Create EPG static paths
    cisco.aci.aci_static_binding_to_epg:
      <<: *aci_login
      tenant: '{{ item.static_paths_tenant }}'
      ap: '{{ item.static_paths_application_profile }}'
      epg: '{{ item.static_paths_epg }}'
      deploy_immediacy: '{{ item.static_paths_immediacy }}'
      encap_id: '{{ item.static_paths_encap_id }}'
      interface: '{{ item.static_paths_interface }}'
      interface_mode: '{{ item.static_paths_interface_mode }}'
      interface_type: '{{ item.static_paths_interface_type }}'
      leafs: '{{ item.static_paths_leafs }}'
      pod_id: '{{ item.static_paths_pod_id }}'
      state: '{{ item.static_paths_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("static_paths") }}'