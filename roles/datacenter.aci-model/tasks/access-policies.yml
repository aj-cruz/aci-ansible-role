- name: Push aci_model

  # We prepare an aci_login anchor for convenience
  vars:
    aci_login: &aci_login
      hostname: '{{ apic_host }}'
      username: '{{ apic_username }}'
      password: '{{ apic_password }}'
      use_proxy: '{{ apic_use_proxy }}'
      validate_certs: '{{ apic_validate_certs }}'

  # We define the delegate_to at the block-level
  delegate_to: localhost

  block:
  - name: Create Virtual Port Channel protection groups
    cisco.aci.aci_switch_policy_vpc_protection_group:
      <<: *aci_login
      protection_group: '{{ item.access_policy_switch_policy_virtual_port_channel_name }}'
      protection_group_id: '{{ item.access_policy_switch_policy_virtual_port_channel_grp_id }}'
      switch_1_id: '{{ item.access_policy_switch_policy_virtual_port_channel_switch1 }}'
      switch_2_id: '{{ item.access_policy_switch_policy_virtual_port_channel_switch2 }}'
      vpc_domain_policy: '{{ item.access_policy_switch_policy_virtual_port_channel_policy }}'
      state: '{{ item.access_policy_switch_policy_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","switch_policy_virtual_port_channel") }}'

  - name: Create LLDP interface policies
    cisco.aci.aci_interface_policy_lldp:
      <<: *aci_login
      lldp_policy: '{{ item.access_policy_interface_policy_lldp_name }}'
      receive_state: '{{ item.access_policy_interface_policy_lldp_receive }}'
      transmit_state: '{{ item.access_policy_interface_policy_lldp_transmit }}'
      state: '{{ item.access_policy_interface_policy_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_lldp") }}'

  - name: Create CDP interface policies
    cisco.aci.aci_interface_policy_cdp:
      <<: *aci_login
      cdp_policy: '{{ item.access_policy_interface_policy_cdp_name }}'
      admin_state: '{{ item.access_policy_interface_policy_cdp_state }}'
      state: '{{ item.access_policy_interface_policy_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_cdp") }}'

  - name: Create port channel policies
    cisco.aci.aci_interface_policy_port_channel:
      <<: *aci_login
      port_channel: '{{ item.access_policy_interface_policy_port_channel_name }}'
      mode: '{{ item.access_policy_interface_policy_port_channel_mode }}'
      state: '{{ item.access_policy_interface_policy_port_channel_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_port_channel") }}'

  - name: Configure Link Level Policies
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/infra/hintfpol-{{ item.access_policy_interface_policy_linklevel_name }}.json
      method: post
      content:
        {
            "fabricHIfPol": {
                "attributes": {
                    "dn": "uni/infra/hintfpol-{{ item.access_policy_interface_policy_linklevel_name }}",
                    "name": "{{ item.access_policy_interface_policy_linklevel_name }}",
                    "autoNeg": "{{ item.access_policy_interface_policy_linklevel_autonegotiate | default() }}",
                    "speed": "{{ item.access_policy_interface_policy_linklevel_speed }}",
                    "linkDebounce": "{{ item.access_policy_interface_policy_linklevel_link_debounce | default() }}",
                    "fecMode": "{{ item.access_policy_interface_policy_linklevel_fec_mode | default(None) or omit }}",
                    "rn": "hintfpol-{{ item.access_policy_interface_policy_linklevel_name }}",
                    "status": "{{ item.access_policy_interface_policy_linklevel_status | default() }}"
                },
                "children": []
            }
        }
    with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_linklevel") }}'

  - name: Create MCP interface policies
    cisco.aci.aci_interface_policy_mcp:
      <<: *aci_login
      mcp: '{{ item.access_policy_interface_policy_mcp_name }}'
      admin_state: '{{ item.access_policy_interface_policy_mcp_admin_state }}'
      state: '{{ item.access_policy_interface_policy_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_mcp") }}'

  - name: Configure Spanning Tree Policies
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/infra/ifPol-{{ item.access_policy_interface_policy_stp_name }}.json
      method: post
      content:
        {
            "stpIfPol": {
                "attributes": {
                    "dn": "uni/infra/ifPol-{{ item.access_policy_interface_policy_stp_name }}",
                    "name": "{{ item.access_policy_interface_policy_stp_name }}",
                    "ctrl": "{{ item.access_policy_interface_policy_stp_ctrl }}",
                    "rn": "ifPol-{{ item.access_policy_interface_policy_stp_name }}",
                    "status": "{{ item.access_policy_interface_policy_linklevel_status | default() }}"
                },
                "children": []
            }
        }
    with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_stp") }}'

  - name: Add VLAN pools
    cisco.aci.aci_vlan_pool:
      <<: *aci_login
      pool: '{{ item.access_policy_vlan_pool_name }}'
      pool_allocation_mode: '{{ item.access_policy_vlan_pool_alloc }}'
      state: '{{ item.access_policy_vlan_pool_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","vlan_pool") }}'

  - name: Add encapsulation blocks to VLAN pools
    cisco.aci.aci_vlan_pool_encap_block:
      <<: *aci_login
      pool: '{{ item.access_policy_vlan_pool_name }}'
      pool_allocation_mode: '{{ item.access_policy_vlan_pool_alloc }}'
      block_name: 'none'
      block_start: '{{ item.access_policy_vlan_pool_encap_block_from }}'
      block_end: '{{ item.access_policy_vlan_pool_encap_block_to }}'
      state: '{{ item.access_policy_vlan_pool_encap_block_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","vlan_pool","encap_block") }}'

  - name: Add domains
    cisco.aci.aci_domain:
      <<: *aci_login
      domain: '{{ item.access_policy_domain_name }}'
      domain_type: '{{ item.access_policy_domain_type }}'
      vm_provider: '{{ item.access_policy_domain_vm_provider | default(None) or omit }}'
      vswitch: '{{ item.access_policy_domain_vswitch_type | default(None) or omit }}'
      state: '{{ item.access_policy_domain_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","domain") }}'

  - name: Bind domains to VLAN pools
    cisco.aci.aci_domain_to_vlan_pool:
      <<: *aci_login
      domain: '{{ item.access_policy_domain_name }}'
      domain_type: '{{ item.access_policy_domain_type }}'
      pool: '{{ item.access_policy_domain_vlan_pool }}'
      pool_allocation_mode: '{{ item.access_policy_domain_vlan_pool_allocation }}'
      vm_provider: '{{ item.access_policy_domain_vm_provider | default(None) or omit }}'
      state: '{{ item.access_policy_domain_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","domain") }}'

  # - name: Add AAEPs
  #   cisco.aci.aci_rest:
  #     <<: *aci_login
  #     path: /api/node/mo/uni/infra.json
  #     method: post
  #     output_level: debug
  #     content:
  #       {
  #           "infraInfra": {
  #               "attributes": {
  #                   "dn": "uni/infra",
  #                   "status": "modified"
  #               },
  #               "children": [
  #                   {
  #                       "infraAttEntityP": {
  #                           "attributes": {
  #                               "dn": "uni/infra/attentp-{{ item.access_policy_aci_aep_name }}",
  #                               "name": "{{ item.access_policy_aci_aep_name }}",
  #                               "descr": "{{ item.access_policy_aci_aep_description }}",
  #                               "rn": "attentp-{{ item.access_policy_aci_aep_name }}",
  #                               "status": "{{ item.system_settings_bgprr_status | default() }}"
  #                           },
  #                           "children": []
  #                       }
  #                   },
  #                   {
  #                       "infraFuncP": {
  #                           "attributes": {
  #                               "dn": "uni/infra/funcprof",
  #                               "status": "modified"
  #                           },
  #                           "children": []
  #                       }
  #                   }
  #               ]
  #           }
  #       }
  #   with_items: '{{ aci_model_data|aci_listify("access_policy","aci_aep") }}'
   
  # THE NATIVE AAEP MODULE HAS AN IDEMPOTENCY BUG WHERE IT WANTS TO DESTROY AND RE-CREATE AAEPS EVERY RUN SO USING RAW REST (ABOVE)
  - name: Add AAEPs
    cisco.aci.aci_aep:
      <<: *aci_login
      aep: '{{ item.access_policy_aci_aep_name }}'
      description: '{{ item.access_policy_aci_aep_description }}'
      # infra_vlan: '{{ item.access_policy_aci_aep_enable_infra_vlan }}'
      state: '{{ item.access_policy_aci_aep_state | default("present") }}'
      output_level: debug
    with_items: '{{ aci_model_data|aci_listify("access_policy","aci_aep") }}'

  - name: Bind AAEPs to Domains
    aci_aep_to_domain:
      <<: *aci_login
      aep: '{{ item.access_policy_aci_aep_name }}'
      domain: '{{ item.access_policy_aci_aep_domains_name }}'
      domain_type: '{{ item.access_policy_aci_aep_domains_type }}'
      vm_provider: '{{ item.access_policy_aci_aep_domains_vm_provider | default(None) or omit }}'
      state: '{{ item.access_policy_aci_aep_domains_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","aci_aep","domains") }}'
  
  - name: Add leaf interface policy groups
    cisco.aci.aci_interface_policy_leaf_policy_group:
      <<: *aci_login
      policy_group: '{{ item.access_policy_interface_policy_group_name }}'
      description: '{{ item.access_policy_interface_policy_group_description | default(None) }}'
      lag_type: '{{ item.access_policy_interface_policy_group_type | default(None) or omit }}'
      port_channel_policy: '{{ item.access_policy_interface_policy_group_lacp_pol | default(None) or omit }}'
      aep: '{{ item.access_policy_interface_policy_group_aaep | default(None) or omit }}'
      port_security_policy:  '{{ item.access_policy_interface_policy_group_port_security_policy | default(None) or omit }}'
      stp_interface_policy: '{{ item.access_policy_interface_policy_group_stp_pol | default(None) or omit }}'
      cdp_policy: '{{ item.access_policy_interface_policy_group_cdp_pol | default(None) or omit }}'
      lldp_policy: '{{ item.access_policy_interface_policy_group_lldp_pol | default(None) or omit }}'
      link_level_policy: '{{ item.access_policy_interface_policy_group_link_pol | default(None) or omit }}'
      mcp_policy: '{{ item.access_policy_interface_policy_group_mcp_pol | default(None) or omit }}'
      monitoring_policy: '{{ item.access_policy_interface_policy_group_monitoring_policy | default(None) or omit }}'
      l2_interface_policy: '{{ item.access_policy_interface_policy_group_l2_interface_policy | default(None) or omit }}'
      state: '{{ item.access_policy_interface_policy_group_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_group") }}'

  - name: Create Access Port Selectors and associate to an Interface Policy Leaf Profile with a Policy Group
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/infra/accportprof-{{ item.access_policy_interface_policy_profile_name }}.json
      method: post
      content:
        {
            "infraAccPortP": {
                "attributes": {
                    "descr": "",
                    "dn": "uni/infra/accportprof-{{ item.access_policy_interface_policy_profile_name }}",
                    "name": "{{ item.access_policy_interface_policy_profile_name }}",
                    "ownerKey": "",
                    "ownerTag": "",
                    "status": "{{ item.access_policy_interface_policy_profile_status | default() }}"
                },
                "children": [
                    {
                        "infraHPortS": {
                            "attributes": {
                                "descr": "",
                                "name": "{{ item.access_policy_interface_policy_profile_port_selector_name }}",
                                "ownerKey": "",
                                "ownerTag": "",
                                "type": "range",
                                "status": "{{ item.access_policy_interface_policy_profile_port_selector_status | default() }}"
                            },
                            "children": [
                                {
                                    "infraRsAccBaseGrp": {
                                        "attributes": {
                                            "fexId": "101",
                                            "tDn": "uni/infra/funcprof/{{ item.access_policy_interface_policy_profile_port_selector_policy_grp_type }}-{{ item.access_policy_interface_policy_profile_port_selector_policy_grp }}"
                                        }
                                    }
                                },
                                {
                                    "infraPortBlk": {
                                        "attributes": {
                                            "descr": "",
                                            "fromCard": "1",
                                            "fromPort": "{{ item.access_policy_interface_policy_profile_port_selector_from }}",
                                            "name": "block2",
                                            "toCard": "1",
                                            "toPort": "{{ item.access_policy_interface_policy_profile_port_selector_to }}"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        }
    with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_profile","port_selector") }}'

  # THIS IS INCLUDED IN THE ACI_REST CALL ABOVE UNTIL THE BUG IN THE MODULE BELOW IS FIXED
  # - name: Add interface policy profiles
  #   cisco.aci.aci_interface_policy_leaf_profile:
  #     <<: *aci_login
  #     leaf_interface_profile: '{{ item.access_policy_interface_policy_profile_name }}'
  #     state: '{{ item.access_policy_interface_policy_profile_state | default("present") }}'
  #   with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_profile") }}'
    
  # THE NATIVE PORT SELECTOR MODULE HAS A BUG WHERE IT WILL CREATE THE PORT SELECTOR AND EVERYTHING LOOKS FINE
  # BUT WHEN YOU TRY TO SELECT THE INTERFACE (PC & VPC) IT DOES NOT SHOW UP IN THE LIST
  # - name: Associate an Interface Access Port Selector to an Interface Policy Leaf Profile with a Policy Group
  #   cisco.aci.aci_access_port_to_interface_policy_leaf_profile:
  #     <<: *aci_login
  #     leaf_interface_profile: '{{ item.access_policy_interface_policy_profile_name }}'
  #     access_port_selector: '{{ item.access_policy_interface_policy_profile_port_selector_name }}'
  #     leaf_port_blk: '{{ item.access_policy_interface_policy_profile_port_selector_name }}'
  #     from_port: '{{ item.access_policy_interface_policy_profile_port_selector_from | default(None) or omit }}'
  #     to_port: '{{ item.access_policy_interface_policy_profile_port_selector_to | default(None) or omit }}'
  #     policy_group: '{{ item.access_policy_interface_policy_profile_port_selector_policy_grp | default(None) or omit }}'
  #     state: '{{ item.access_policy_interface_policy_profile_port_selector_state | default("present") }}'
  #   with_items: '{{ aci_model_data|aci_listify("access_policy","interface_policy_profile","port_selector") }}'

  - name: Add leaf switch profiles
    cisco.aci.aci_switch_policy_leaf_profile:
      <<: *aci_login
      leaf_profile: '{{ item.access_policy_switch_policy_profile_name }}'
      description: '{{ item.access_policy_switch_policy_profile_description | default("") }}'
      state: '{{ item.access_policy_switch_policy_profile_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","switch_policy_profile") }}'

  - name: Bind leaf selectors to leaf switch profiles
    cisco.aci.aci_switch_leaf_selector:
      <<: *aci_login
      leaf_profile: '{{ item.access_policy_switch_policy_profile_name }}'
      leaf: '{{ item.access_policy_switch_policy_profile_leaf_selector_name }}'
      description: '{{ item.access_policy_switch_policy_profile_leaf_selector_description | default("") }}'
      from: '{{ item.access_policy_switch_policy_profile_leaf_selector_from }}'
      to: '{{ item.access_policy_switch_policy_profile_leaf_selector_to }}'
      leaf_node_blk: none
      state: '{{ item.access_policy_switch_policy_profile_leaf_selector_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","switch_policy_profile","leaf_selector") }}'
  
  - name: Bind leaf interface selector profiles to leaf switch profiles
    cisco.aci.aci_interface_selector_to_switch_policy_leaf_profile:
      <<: *aci_login
      interface_selector: '{{ item.access_policy_switch_policy_profile_interface_selector_profile_name }}'
      leaf_profile: '{{ item.access_policy_switch_policy_profile_name }}'
      state: '{{ item.access_policy_switch_policy_profile_interface_selector_profile_state | default("present") }}'
    with_items: '{{ aci_model_data|aci_listify("access_policy","switch_policy_profile","interface_selector_profile") }}'

  - name: Create spine interface policy groups
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/infra/funcprof/spaccportgrp-{{ item.access_policy_spine_interface_policy_group_name }}.json
      method: post
      content:
        {
            "infraSpAccPortGrp": {
                "attributes": {
                    "dn": "uni/infra/funcprof/spaccportgrp-{{ item.access_policy_spine_interface_policy_group_name }}",
                    "name": "{{ item.access_policy_spine_interface_policy_group_name }}",
                    "rn": "spaccportgrp-{{ item.access_policy_spine_interface_policy_group_name }}",
                    "status": "{{ item.access_policy_spine_interface_policy_group_status | default() }}"
                },
                "children": [
                    {
                        "infraRsHIfPol": {
                            "attributes": {
                                "tnFabricHIfPolName": "{{ item.access_policy_spine_interface_policy_group_link_pol }}",
                                "status": "{{ item.access_policy_spine_interface_policy_group_status | default() }}"
                            },
                            "children": []
                        }
                    },
                    {
                        "infraRsCdpIfPol": {
                            "attributes": {
                                "tnCdpIfPolName": "{{ item.access_policy_spine_interface_policy_group_cdp_pol }}",
                                "status": "{{ item.access_policy_spine_interface_policy_group_status | default() }}"
                            },
                            "children": []
                        }
                    },
                    {
                        "infraRsMacsecIfPol": {
                            "attributes": {
                                "tnMacsecIfPolName": "{{ item.access_policy_spine_interface_policy_group_macsec_pol }}",
                                "status": "{{ item.access_policy_spine_interface_policy_group_status | default() }}"
                            },
                            "children": []
                        }
                    },
                    {
                        "infraRsAttEntP": {
                            "attributes": {
                                "tDn": "uni/infra/attentp-{{ item.access_policy_spine_interface_policy_group_aaep }}",
                                "status": "{{ item.access_policy_spine_interface_policy_group_status | default() }}"
                            },
                            "children": []
                        }
                    }
                ]
            }
        }
    with_items: '{{ aci_model_data|aci_listify("access_policy","spine_interface_policy_group") }}'

  - name: Add spine switch profiles and bind spine switch selectors
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/mo/uni/infra/spprof-{{ item.access_policy_switch_policy_spine_profile_name }}.json
      method: post
      content:
        {
            "infraSpineP": {
                "attributes": {
                    "dn": "uni/infra/spprof-{{ item.access_policy_switch_policy_spine_profile_name }}",
                    "name": "{{ item.access_policy_switch_policy_spine_profile_name }}",
                    "rn": "spprof-{{ item.access_policy_switch_policy_spine_profile_name }}",
                    "status": "{{ item.access_policy_switch_policy_spine_profile_status | default() }}"
                },
                "children": [
                    {
                        "infraSpineS": {
                            "attributes": {
                                "dn": "uni/infra/spprof-{{ item.access_policy_switch_policy_spine_profile_name }}/spines-{{ item.access_policy_switch_policy_spine_profile_spine_selector_name }}-typ-range",
                                "type": "range",
                                "name": "{{ item.access_policy_switch_policy_spine_profile_spine_selector_name }}",
                                "rn": "spines-{{ item.access_policy_switch_policy_spine_profile_spine_selector_name }}-typ-range",
                                "status": "{{ item.access_policy_switch_policy_spine_profile_spine_selector_status | default() }}"
                            },
                            "children": [
                                {
                                    "infraNodeBlk": {
                                        "attributes": {
                                            "dn": "uni/infra/spprof-{{ item.access_policy_switch_policy_spine_profile_name }}/spines-{{ item.access_policy_switch_policy_spine_profile_spine_selector_name }}-typ-range/nodeblk-3b8905f8d61fe7b2",
                                            "from_": "{{ item.access_policy_switch_policy_spine_profile_spine_selector_from }}",
                                            "to_": "{{ item.access_policy_switch_policy_spine_profile_spine_selector_to }}",
                                            "name": "3b8905f8d61fe7b2",
                                            "rn": "nodeblk-3b8905f8d61fe7b2",
                                            "status": "{{ item.access_policy_switch_policy_spine_profile_spine_selector_status | default() }}"
                                        },
                                        "children": []
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        }
    with_items: '{{ aci_model_data|aci_listify("access_policy","switch_policy_spine_profile","spine_selector") }}'  

  - name: Log in to APIC and Generate token (For using URI module)
    uri:
        url: https://{{apic_host}}/api/aaaLogin.json
        method: POST
        body_format: json
        body: '{ "aaaUser" : { "attributes": {"name":"{{apic_username}}","pwd":"{{apic_password}}" } } }'
        status_code: 200
        validate_certs: no
    register: login

  - name: Create Spine Interface Profiles and bind spine port selectors (URI REST)
    uri:
        url: https://{{apic_host}}/api/node/mo/uni/infra/spaccportprof-{{ item.access_policy_spine_interface_policy_profile_name }}.json
        method: POST
        return_content: yes
        body_format: json
        body:
            {
                "infraSpAccPortP": {
                    "attributes": {
                        "dn": "uni/infra/spaccportprof-{{ item.access_policy_spine_interface_policy_profile_name }}",
                        "name": "{{ item.access_policy_spine_interface_policy_profile_name }}",
                        "rn": "spaccportprof-{{ item.access_policy_spine_interface_policy_profile_name }}",
                        "status": "{{ item.access_policy_spine_interface_poilcy_profile_status | default() }}"
                    },
                    "children": [
                        {
                            "infraSHPortS": {
                                "attributes": {
                                    "dn": "uni/infra/spaccportprof-{{ item.access_policy_spine_interface_policy_profile_name }}/shports-{{ item.access_policy_spine_interface_policy_profile_port_selector_name }}-typ-range",
                                    "name": "{{ item.access_policy_spine_interface_policy_profile_port_selector_name }}",
                                    "rn": "shports-{{ item.access_policy_spine_interface_policy_profile_port_selector_name }}-typ-range",
                                    "status": "{{ item.access_policy_spine_interface_poilcy_profile_port_selector_status | default() }}"
                                },
                                "children": [
                                    {
                                        "infraPortBlk": {
                                            "attributes": {
                                                "dn": "uni/infra/spaccportprof-{{ item.access_policy_spine_interface_policy_profile_name }}/shports-{{ item.access_policy_spine_interface_policy_profile_port_selector_name }}-typ-range/portblk-block2",
                                                "fromPort": "{{ item.access_policy_spine_interface_policy_profile_port_selector_from }}",
                                                "toPort": "{{ item.access_policy_spine_interface_policy_profile_port_selector_to }}",
                                                "name": "block2",
                                                "rn": "portblk-block2",
                                                "status": "{{ item.access_policy_spine_interface_poilcy_profile_port_selector_status | default() }}"
                                            },
                                            "children": []
                                        }
                                    },
                                    {
                                        "infraRsSpAccGrp": {
                                            "attributes": {
                                                "tDn": "uni/infra/funcprof/spaccportgrp-{{ item.access_policy_spine_interface_policy_profile_port_selector_policy_grp }}",
                                                "status": "{{ item.access_policy_spine_interface_poilcy_profile_port_selector_status | default() }}"
                                            },
                                            "children": []
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        headers:
            Cookie: "{{ login.set_cookie }}"
        validate_certs: no
    with_items: '{{ aci_model_data|aci_listify("access_policy","spine_interface_policy_profile","port_selector") }}'

  - name: Bind Spine Interface Profiles to Spine Switch Profiles (REST)
    cisco.aci.aci_rest:
      <<: *aci_login
      path: /api/node/mo/uni/infra/spprof-{{ item.access_policy_switch_policy_spine_profile_name }}.json
      method: post
      content:
        {
            "infraRsSpAccPortP": {
                "attributes": {
                    "tDn": "uni/infra/spaccportprof-{{ item.access_policy_switch_policy_spine_profile_interface_selector_profile_name }}",
                    "status": "{{ item.access_policy_switch_policy_spine_profile_interface_selector_profile_status | default() }}"
                },
                "children": []
            }
        }
    with_items: '{{ aci_model_data|aci_listify("access_policy","switch_policy_spine_profile","interface_selector_profile") }}' 